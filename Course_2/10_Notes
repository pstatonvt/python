[Tuples]

Like lists, but are "immutable"

x = (1,2,3) ... like a list, but with "( )" instead of "[ ]"

Unsortable, can't append, reverse, NOTHING - set in stone

Tuples are more efficient than lists, i.e. memory management

Tuples can be written on both sides of "=", as long as both sides are tuples:
>>>(x,y) = (4, 'fred')
>>>print(y)
fred
>>>print(x)
4

Tuples are comparable
>>>(0, 1, 2) < (5, 1, 2)
True ... here it only looks at the left-most value, so 0 < 5: True

>>>(0, 1, 200000) < (0, 3, 4)
True ... since the left-most values are equal, it moves to the right one and compares those values, 1 < 3: True

Same thing with string comparison, letter by letter, character by character

*Tuples are sortable by their left-most values*
>>>d = {'a':10, 'b':1, 'c':22}
>>>d.items()
dict_items([('a',10), ('c',22), ('b',1)])
>>>sorted(d.items())
[('a',10), ('b',1), ('c', 22)]

*sorted()* orders by KEY-order in a dictionary, NOT value order

To sort by values instead of key:
>>> c= {'a':10, 'b':1, 'c':22}
>>> tmp = list()
>>> for k,v in c.items():
  tmp.append( (v,k ) ) #this just reverses the order since we want to order by VALUE
>>>print(tmp)
[(10,'a'),(22,'c'),(1,'b')]
>>>tmp = sorted(tmp, reverse=True)
>>>print(tmp)
[(22,'c'),(10,'a'),(1,'b')]

Top 10 of something... Ch. 10 video, ~14 min into the video

***super interesting one liner of code, sorting a dictionary and printing out in order - LIST COMPREHENSION
>>>c = {'a':10, 'b':1, 'c':22}
>>>print(sorted)[ (v,k) for k,v in c.items() ] ) ) #might need reverse = True
[(1, 'b'), (10, 'a'), (22, 'c')]
